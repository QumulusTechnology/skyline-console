name: 'Build and Push Kolla Images'

on:
  push:
    branches:
      - main
      - staging
      - qa
      - dev
      - experimental

  workflow_dispatch:
    inputs:
      branch:
        type: choice
        description: 'Branch to build'
        options:
        - main
        - staging
        - qa
        - dev
        - experimental

permissions:
  contents: read
  id-token: write

concurrency:
  group: '${{ github.workflow }} @ ${{ github.repository }} @ ${{ github.event.inputs.branch || github.base_ref || github.ref_name }}'
  cancel-in-progress: true

jobs:
  kolla_build:
    runs-on:
      group: prod

    steps:

      - uses: QumulusTechnology/vault-setup-action@v2
        with:
          aws_account_data: ${{ secrets.AWS_ACCOUNT_DATA }}
          vault_addr: ${{ secrets.VAULT_ADDR }}
          platform: qcp
          secrets: |
            secret/data/qcp/global/harbor/prod/github-user username | REPO_USERNAME ;
            secret/data/qcp/global/harbor/prod/github-user password | REPO_PASSWORD ;
            secret/data/qcp/global/harbor/prod/github-user address | REPO_ADDRESS ;
            secret/data/qcp/global/github-automation-user-ssh-key private_key | SSH_PRIVATE_KEY ;

      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: Set Release version
        run: |

          if [ "$BRANCH" == "main" ]; then
            echo "OPENSTACK_VERSION=2023.2" >> $GITHUB_ENV
            echo "BASE_OS_TAG=22.04" >> $GITHUB_ENV
          elif [ "$BRANCH" == "staging" ]; then
            echo "OPENSTACK_VERSION=2023.2" >> $GITHUB_ENV
            echo "BASE_OS_TAG=22.04" >> $GITHUB_ENV
          elif [ "$BRANCH" == "qa" ]; then
            echo "OPENSTACK_VERSION=2023.2" >> $GITHUB_ENV
            echo "BASE_OS_TAG=22.04" >> $GITHUB_ENV
          elif [ "$BRANCH" == "experimental" ]; then
            echo "OPENSTACK_VERSION=2023.2" >> $GITHUB_ENV
            echo "BASE_OS_TAG=22.04" >> $GITHUB_ENV
          else
            echo "OPENSTACK_VERSION=2023.2" >> $GITHUB_ENV
            echo "BASE_OS_TAG=22.04" >> $GITHUB_ENV
          fi

          if [ "$BRANCH" == "main" ]; then
            TAG=main
          elif [ "$BRANCH" == "staging" ]; then
            TAG=staging
          elif [ "$BRANCH" == "qa" ]; then
            TAG=qa
          elif [ "$BRANCH" == "dev" ]; then
            TAG=dev
          elif [ "$BRANCH" == "experimental" ]; then
            TAG=experimental
          else
            TAG=dev_${BRANCH}
          fi

          echo "TAG=$TAG" >> $GITHUB_ENV

      - name: Set GITHUB Environment Variables
        run: |
          echo "GITHUB_ACTIONS_BRANCH=${{ github.base_ref || github.ref_name }}" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS_WORKFLOW_ID=${{ github.run_id }}" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS_WORKFLOW_ATEMPT=${{ github.run_attempt }}" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS_WORKFLOW_RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
          echo "GITHUB_ACTIONS_AUTHOR=${{ github.actor }}" >> $GITHUB_ENV

      - name: Login to Harbor Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REPO_ADDRESS }}
          username: ${{ env.REPO_USERNAME }}
          password: ${{ env.REPO_PASSWORD }}

      - name: Install Kolla
        run: |
          sudo apt update
          sudo apt install -y bash python3 python3-pip git python3-dev python3-docker libffi-dev gcc libssl-dev python3-venv
          python3 -m venv kolla
          source kolla/bin/activate
          pip install -U pip
          pip install docker
          pip install git+https://github.com/QumulusTechnology/kolla@${BRANCH}

      - name: Create kolla-build.conf
        run: |
          CWD="$(pwd)"
          sudo mkdir -p /etc/kolla
          sudo bash -c "cat << EOF > /etc/kolla/kolla-build.conf
          [DEFAULT]
          base = ubuntu
          base_tag = ${BASE_OS_TAG}
          namespace = ${BRANCH}
          push = true
          skip_existing = false
          threads = 16
          push_threads = 4
          registry = ${REPO_ADDRESS}/kolla
          install_type = source
          tag = latest
          template_override = /etc/kolla/template-overrides.j2
          openstack_release = ${OPENSTACK_VERSION}
          docker_healthchecks = true
          network_mode = host

          [${REPOSITORY}]
          type = local
          location = ${CWD}

          [skyline-apiserver]
          type = local
          location = ${HOME}/repos/skyline-apiserver
          EOF"


      - name: Create template-overrides.j2
        run: |
          sudo bash -c 'cat << EOF > /etc/kolla/template-overrides.j2
          {% extends parent_template %}

          {% block base_ubuntu_package_sources_list %}
          {% endblock %}
          EOF'

      - name: compile javascript
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
          . ~/.nvm/nvm.sh
          NODE_VERSION=erbium
          nvm install lts/$NODE_VERSION
          nvm use lts/$NODE_VERSION
          npm install
          # npx browserslist@latest --update-db
          npm run build

      - name: dowload api-server source
        run: |
          mkdir -p ~/repos
          git clone https://github.com/QumulusTechnology/skyline-apiserver.git -b ${BRANCH} ~/repos/skyline-apiserver

      - name: Build docker images
        run: |
          source kolla/bin/activate
          kolla-build skyline

      - name: Tag and push docker images
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          for i in $(docker images --format '{{.Repository}}' | grep "/${BRANCH}/"); do
            image=${i##*/}
            docker tag ${i}:latest ${REPO_ADDRESS}/kolla/${BRANCH}/${image}:${timestamp}
            docker image push --all-tags ${i}
          done
